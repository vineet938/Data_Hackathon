/* 
 * Data Hub Umbrella API
 *
 * Data Hub umbrella management API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.OpenAPIDateConverter;

namespace GS1US.Tests.Common.APIs.DataHub.Umbrella.Model
{
    /// <summary>
    /// UmbrellaErrorResponse
    /// </summary>
    [DataContract]
    public partial class UmbrellaErrorResponse :  IEquatable<UmbrellaErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UmbrellaErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UmbrellaErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UmbrellaErrorResponse" /> class.
        /// </summary>
        /// <param name="message">message (required).</param>
        /// <param name="modelState">modelState.</param>
        public UmbrellaErrorResponse(string message = default(string), Dictionary<string, List<string>> modelState = default(Dictionary<string, List<string>>))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for UmbrellaErrorResponse and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            this.ModelState = modelState;
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ModelState
        /// </summary>
        [DataMember(Name="ModelState", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> ModelState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UmbrellaErrorResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ModelState: ").Append(ModelState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UmbrellaErrorResponse);
        }

        /// <summary>
        /// Returns true if UmbrellaErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UmbrellaErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UmbrellaErrorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ModelState == input.ModelState ||
                    this.ModelState != null &&
                    this.ModelState.SequenceEqual(input.ModelState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.ModelState != null)
                    hashCode = hashCode * 59 + this.ModelState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
