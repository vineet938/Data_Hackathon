/* 
 * Data Hub Umbrella API
 *
 * Data Hub umbrella management API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GS1US.Tests.Common.APIs.DataHub.Umbrella.Client;
using GS1US.Tests.Common.APIs.DataHub.Umbrella.Model;

namespace GS1US.Tests.Common.APIs.DataHub.Umbrella.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns></returns>
        void CreateUmbrella (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null);

        /// <summary>
        /// create umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUmbrellaWithHttpInfo (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null);
        /// <summary>
        /// delete umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns></returns>
        void DeleteUmbrella (string companyAccountId);

        /// <summary>
        /// delete umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUmbrellaWithHttpInfo (string companyAccountId);
        /// <summary>
        /// get umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>UmbrellaDefinitionResponse</returns>
        UmbrellaDefinitionResponse GetUmbrella (string companyAccountId);

        /// <summary>
        /// get umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of UmbrellaDefinitionResponse</returns>
        ApiResponse<UmbrellaDefinitionResponse> GetUmbrellaWithHttpInfo (string companyAccountId);
        /// <summary>
        /// get umbrella candidates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>UmbrellaDefinitionResponse</returns>
        UmbrellaDefinitionResponse GetUmbrellaCandidates (string companyAccountId);

        /// <summary>
        /// get umbrella candidates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of UmbrellaDefinitionResponse</returns>
        ApiResponse<UmbrellaDefinitionResponse> GetUmbrellaCandidatesWithHttpInfo (string companyAccountId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateUmbrellaAsync (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null);

        /// <summary>
        /// create umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUmbrellaAsyncWithHttpInfo (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null);
        /// <summary>
        /// delete umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUmbrellaAsync (string companyAccountId);

        /// <summary>
        /// delete umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUmbrellaAsyncWithHttpInfo (string companyAccountId);
        /// <summary>
        /// get umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of UmbrellaDefinitionResponse</returns>
        System.Threading.Tasks.Task<UmbrellaDefinitionResponse> GetUmbrellaAsync (string companyAccountId);

        /// <summary>
        /// get umbrella definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse (UmbrellaDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UmbrellaDefinitionResponse>> GetUmbrellaAsyncWithHttpInfo (string companyAccountId);
        /// <summary>
        /// get umbrella candidates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of UmbrellaDefinitionResponse</returns>
        System.Threading.Tasks.Task<UmbrellaDefinitionResponse> GetUmbrellaCandidatesAsync (string companyAccountId);

        /// <summary>
        /// get umbrella candidates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse (UmbrellaDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UmbrellaDefinitionResponse>> GetUmbrellaCandidatesAsyncWithHttpInfo (string companyAccountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration.MergeConfigurations(
                GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.GlobalConfiguration.Instance,
                new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration.MergeConfigurations(
                GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ISynchronousClient client,GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.IAsynchronousClient asyncClient, GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns></returns>
        public void CreateUmbrella (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null)
        {
             CreateUmbrellaWithHttpInfo(umbrellaDefinitionRequest);
        }

        /// <summary>
        /// create umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<Object> CreateUmbrellaWithHttpInfo (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null)
        {
            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = umbrellaDefinitionRequest;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/umbrellaDefinitions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// create umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateUmbrellaAsync (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null)
        {
             await CreateUmbrellaAsyncWithHttpInfo(umbrellaDefinitionRequest);

        }

        /// <summary>
        /// create umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="umbrellaDefinitionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<Object>> CreateUmbrellaAsyncWithHttpInfo (UmbrellaDefinitionRequest umbrellaDefinitionRequest = null)
        {

            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = umbrellaDefinitionRequest;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/umbrellaDefinitions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// delete umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns></returns>
        public void DeleteUmbrella (string companyAccountId)
        {
             DeleteUmbrellaWithHttpInfo(companyAccountId);
        }

        /// <summary>
        /// delete umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<Object> DeleteUmbrellaWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->DeleteUmbrella");

            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarConentType = ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/umbrellaDefinitions/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// delete umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUmbrellaAsync (string companyAccountId)
        {
             await DeleteUmbrellaAsyncWithHttpInfo(companyAccountId);

        }

        /// <summary>
        /// delete umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<Object>> DeleteUmbrellaAsyncWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->DeleteUmbrella");


            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/umbrellaDefinitions/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>UmbrellaDefinitionResponse</returns>
        public UmbrellaDefinitionResponse GetUmbrella (string companyAccountId)
        {
             GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse> localVarResponse = GetUmbrellaWithHttpInfo(companyAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of UmbrellaDefinitionResponse</returns>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse< UmbrellaDefinitionResponse > GetUmbrellaWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->GetUmbrella");

            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< UmbrellaDefinitionResponse >("/umbrellaDefinitions/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of UmbrellaDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<UmbrellaDefinitionResponse> GetUmbrellaAsync (string companyAccountId)
        {
             GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse> localVarResponse = await GetUmbrellaAsyncWithHttpInfo(companyAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get umbrella definition 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse (UmbrellaDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse>> GetUmbrellaAsyncWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->GetUmbrella");


            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UmbrellaDefinitionResponse>("/umbrellaDefinitions/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUmbrella", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get umbrella candidates 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>UmbrellaDefinitionResponse</returns>
        public UmbrellaDefinitionResponse GetUmbrellaCandidates (string companyAccountId)
        {
             GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse> localVarResponse = GetUmbrellaCandidatesWithHttpInfo(companyAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get umbrella candidates 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>ApiResponse of UmbrellaDefinitionResponse</returns>
        public GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse< UmbrellaDefinitionResponse > GetUmbrellaCandidatesWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->GetUmbrellaCandidates");

            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< UmbrellaDefinitionResponse >("/umbrellaCandidates/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUmbrellaCandidates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get umbrella candidates 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of UmbrellaDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<UmbrellaDefinitionResponse> GetUmbrellaCandidatesAsync (string companyAccountId)
        {
             GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse> localVarResponse = await GetUmbrellaCandidatesAsyncWithHttpInfo(companyAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get umbrella candidates 
        /// </summary>
        /// <exception cref="GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyAccountId">IMIS company id</param>
        /// <returns>Task of ApiResponse (UmbrellaDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiResponse<UmbrellaDefinitionResponse>> GetUmbrellaCandidatesAsyncWithHttpInfo (string companyAccountId)
        {
            // verify the required parameter 'companyAccountId' is set
            if (companyAccountId == null)
                throw new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ApiException(400, "Missing required parameter 'companyAccountId' when calling DefaultApi->GetUmbrellaCandidates");


            GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions requestOptions = new GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (companyAccountId != null)
                requestOptions.PathParameters.Add("companyAccountId", GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToString(companyAccountId)); // path parameter

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                requestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                foreach (var kvp in GS1US.Tests.Common.APIs.DataHub.Umbrella.Client.ClientUtils.ParameterToMultiMap("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UmbrellaDefinitionResponse>("/umbrellaCandidates/{companyAccountId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUmbrellaCandidates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
